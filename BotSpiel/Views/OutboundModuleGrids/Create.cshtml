
@model BotSpiel.DataAccess.Models.OutboundModuleGridsPost

@{
    ViewBag.Title = "Create Outbound Module Grids";
}
<br>
<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Outbound Module Grids</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="form-group">
            @Html.LabelFor(model => model.sOutboundModuleGrid, "Outbound Module Grid", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sOutboundModuleGrid, new { htmlAttributes = new { @class = "form-control", @Value = @Html.Raw(""), @placeholder = "Required" } })
                @Html.ValidationMessageFor(model => model.sOutboundModuleGrid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sShortDescription, "Short Description", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sShortDescription, new { htmlAttributes = new { @class = "form-control", @placeholder = "Required" } })
                @Html.ValidationMessageFor(model => model.sShortDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.sDataEntityType, "Data Entity Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sDataEntityType, new { htmlAttributes = new { @class = "form-control", @placeholder = "Required" } })
                @Html.ValidationMessageFor(model => model.sDataEntityType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bCanCreate, "Can Create", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bCanCreate, new { htmlAttributes = new { @class = "form-control", @placeholder = "Required" } })
                @Html.ValidationMessageFor(model => model.bCanCreate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bCanEdit, "Can Edit", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bCanEdit, new { htmlAttributes = new { @class = "form-control", @placeholder = "Required" } })
                @Html.ValidationMessageFor(model => model.bCanEdit, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bCanDelete, "Can Delete", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.bCanDelete, new { htmlAttributes = new { @class = "form-control", @placeholder = "Required" } })
                @Html.ValidationMessageFor(model => model.bCanDelete, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Grid", "Index")
</div>

@section Scripts {
}

 

