@*//Custom Code Start | Added Code Block*@
@using System.Linq;
@using System.Collections.Generic;
@using BotSpiel.Services;
@using BotSpiel.DataAccess.Models;
@inject IInventoryUnitsService _inventoryUnitsService
@*//Custom Code End*@
@model BotSpiel.DataAccess.Models.HandlingUnits

@{
	ViewBag.Title = "Details Handling Units";
}
<br>
<h2>Details</h2>

<div>
	<h4>Handling Units</h4>
	<hr />
	<dl class="dl-horizontal">
		<dt>
			@Html.DisplayNameFor(model => model.ixHandlingUnit)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.ixHandlingUnit)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.sHandlingUnit)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.sHandlingUnit)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.HandlingUnitTypes.sHandlingUnitType)
		</dt>
		<dd>
			@Html.ActionLink(Model.HandlingUnitTypes.sHandlingUnitType, "Details", "HandlingUnitTypes", new { id = Model.ixHandlingUnitType }, null)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.ixParentHandlingUnit)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.HandlingUnitsFKDiffParentHandlingUnit.sHandlingUnit)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.ixPackingMaterial)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.MaterialsFKDiffPackingMaterial.sMaterial)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.MaterialHandlingUnitConfigurations.sMaterialHandlingUnitConfiguration)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.MaterialHandlingUnitConfigurations.sMaterialHandlingUnitConfiguration)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.nLength)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.nLength)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.ixLengthUnit)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.UnitsOfMeasurementFKDiffLengthUnit.sUnitOfMeasurement)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.nWidth)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.nWidth)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.ixWidthUnit)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.UnitsOfMeasurementFKDiffWidthUnit.sUnitOfMeasurement)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.nHeight)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.nHeight)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.ixHeightUnit)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.UnitsOfMeasurementFKDiffHeightUnit.sUnitOfMeasurement)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.nWeight)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.nWeight)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.ixWeightUnit)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.Statuses.sStatus)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.Statuses.sStatus)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.UnitsOfMeasurementFKDiffWeightUnit.sUnitOfMeasurement)
		</dd>


	</dl>
</div>

@*//Custom Code Start | Added Code Block*@
<div>
	@{
		List<BotSpiel.DataAccess.Models.InventoryUnits> inventoryUnits = new List<InventoryUnits>();
		//Add empty record
		InventoryUnits inventoryUnit = new InventoryUnits();
		inventoryUnit.ixHandlingUnit = Model.ixHandlingUnit;
		inventoryUnit.HandlingUnits.ixHandlingUnit = Model.ixHandlingUnit;
		inventoryUnits.Add(inventoryUnit);
		_inventoryUnitsService.IndexDb().Where(x => x.ixHandlingUnit == Model.ixHandlingUnit).ToList().ForEach(x =>
			{
				inventoryUnits.Add(x);
			}
			);
	}
	@await Html.PartialAsync("IndexInventoryUnits", inventoryUnits)
</div>
@*//Custom Code End*@

<p>
	@Html.ActionLink("Edit", "Edit", new { id = Model.ixHandlingUnit }) |
	@Html.ActionLink("Delete", "Delete", new { id = Model.ixHandlingUnit }) |
	@Html.ActionLink("Grid", "Index")
</p>



