@using System.Linq;
@using System.Collections.Generic;
@using BotSpiel.Services;
@using BotSpiel.Services.Utilities;
@inject IHandlingUnitTypesService _handlingunittypesService
@model BotSpiel.DataAccess.Models.HandlingUnitTypes

@{
    ViewBag.Title = "Delete Handling Unit Types";
}

@{
    string conCat = "";
    List<string> existInEntities = new List<string>();
    bool DeleteOK = true;
    existInEntities = _handlingunittypesService.VerifyHandlingUnitTypeDeleteOK(Model.ixHandlingUnitType, Model.sHandlingUnitType);
    if (existInEntities.Any()) { DeleteOK = false; }
}


@if (DeleteOK)
{

<br>
<h2>Delete</h2>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Handling Unit Types</h4>
    <hr />
    <dl class="dl-horizontal">
		<dt>
			@Html.DisplayNameFor(model => model.ixHandlingUnitType)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.ixHandlingUnitType)
		</dd>
		<dt>
			@Html.DisplayNameFor(model => model.sHandlingUnitType)
		</dt>
		<dd>
			@Html.DisplayFor(model => model.sHandlingUnitType)
		</dd>
 
    </dl>

    @using (Html.BeginForm()) {
        @Html.AntiForgeryToken()

        <div class="form-actions no-color">
            <input type="submit" value="Delete" class="btn btn-default" /> |
            @Html.ActionLink("Grid", "Index")
        </div>
    }
</div>
}
else
{
    <br>
    <h2>Delete</h2>

    <h3>The HandlingUnitType @Model.sHandlingUnitType cannot be deleted. It is referenced by the following entities:</h3>
    <hr />
    @foreach (var entity in existInEntities)
    {
        conCat = String.Join(" ", StringSplitters.SplitCamelCase(@entity.ToString()));
        <h4>@Html.ActionLink(@conCat.ToString(), "Index", @entity.ToString())</h4>
        <hr />
    }

    <h3>If you want to delete the HandlingUnitType, delete the dependent references first.</h3>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-actions no-color">
            @Html.ActionLink("Grid", "Index")
        </div>
    }

}
 

